{"ast":null,"code":"import { Environment, Network, QueryResponseCache, RecordSource, Store } from 'relay-runtime';\nconst oneMinute = 60 * 1000;\nconst cache = new QueryResponseCache({\n  size: 250,\n  ttl: oneMinute\n});\n\nfunction getApi() {\n  return window.location.origin.split(\":\")[0] + \":\" + window.location.origin.split(\":\")[1]; // return \"https://silverman.app\"\n}\n\nfunction fetchQuery(operation, variables, cacheConfig) {\n  const queryID = operation.text;\n  const isMutation = operation.operationKind === 'mutation';\n  const isQuery = operation.operationKind === 'query';\n  const forceFetch = cacheConfig && cacheConfig.force; // Try to get data from cache on queries\n\n  const fromCache = cache.get(queryID, variables);\n\n  if (isQuery && fromCache !== null && !forceFetch) {\n    return fromCache;\n  } // Otherwise, fetch data from server\n\n\n  return fetch(getApi() + '/graphql', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: operation.text,\n      variables\n    })\n  }).then(response => {\n    return response.json();\n  }).then(json => {\n    // Update cache on queries\n    if (isQuery && json) {\n      cache.set(queryID, variables, json);\n    } // Clear cache on mutations\n\n\n    if (isMutation) {\n      cache.clear();\n    }\n\n    return json;\n  });\n}\n\nconst environment = new Environment({\n  network: Network.create(fetchQuery),\n  store: new Store(new RecordSource())\n});\nexport default environment;","map":{"version":3,"sources":["/home/aun/Desktop/tutor-website/src/environment.js"],"names":["Environment","Network","QueryResponseCache","RecordSource","Store","oneMinute","cache","size","ttl","getApi","window","location","origin","split","fetchQuery","operation","variables","cacheConfig","queryID","text","isMutation","operationKind","isQuery","forceFetch","force","fromCache","get","fetch","method","headers","body","JSON","stringify","query","then","response","json","set","clear","environment","network","create","store"],"mappings":"AAAA,SACIA,WADJ,EAEIC,OAFJ,EAGIC,kBAHJ,EAIIC,YAJJ,EAKIC,KALJ,QAMO,eANP;AAQA,MAAMC,SAAS,GAAG,KAAK,IAAvB;AACA,MAAMC,KAAK,GAAG,IAAIJ,kBAAJ,CAAuB;AAACK,EAAAA,IAAI,EAAE,GAAP;AAAYC,EAAAA,GAAG,EAAEH;AAAjB,CAAvB,CAAd;;AAEA,SAASI,MAAT,GAAkB;AACd,SAAOC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuBC,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,IAAuC,GAAvC,GAA6CH,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuBC,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAApD,CADc,CAEd;AACH;;AAED,SAASC,UAAT,CACIC,SADJ,EAEIC,SAFJ,EAGIC,WAHJ,EAIE;AACE,QAAMC,OAAO,GAAGH,SAAS,CAACI,IAA1B;AACA,QAAMC,UAAU,GAAGL,SAAS,CAACM,aAAV,KAA4B,UAA/C;AACA,QAAMC,OAAO,GAAGP,SAAS,CAACM,aAAV,KAA4B,OAA5C;AACA,QAAME,UAAU,GAAGN,WAAW,IAAIA,WAAW,CAACO,KAA9C,CAJF,CAME;;AACA,QAAMC,SAAS,GAAGnB,KAAK,CAACoB,GAAN,CAAUR,OAAV,EAAmBF,SAAnB,CAAlB;;AACA,MACIM,OAAO,IACPG,SAAS,KAAK,IADd,IAEA,CAACF,UAHL,EAIE;AACE,WAAOE,SAAP;AACH,GAdH,CAgBE;;;AACA,SAAOE,KAAK,CAAClB,MAAM,KAAG,UAAV,EAAsB;AAC9BmB,IAAAA,MAAM,EAAE,MADsB;AAE9BC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFqB;AAK9BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,MAAAA,KAAK,EAAElB,SAAS,CAACI,IADA;AAEjBH,MAAAA;AAFiB,KAAf;AALwB,GAAtB,CAAL,CASJkB,IATI,CASCC,QAAQ,IAAI;AAChB,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GAXM,EAWJF,IAXI,CAWCE,IAAI,IAAI;AACZ;AACA,QAAId,OAAO,IAAIc,IAAf,EAAqB;AACjB9B,MAAAA,KAAK,CAAC+B,GAAN,CAAUnB,OAAV,EAAmBF,SAAnB,EAA8BoB,IAA9B;AACH,KAJW,CAKZ;;;AACA,QAAIhB,UAAJ,EAAgB;AACZd,MAAAA,KAAK,CAACgC,KAAN;AACH;;AAED,WAAOF,IAAP;AACH,GAtBM,CAAP;AAuBH;;AAED,MAAMG,WAAW,GAAG,IAAIvC,WAAJ,CAAgB;AAChCwC,EAAAA,OAAO,EAAEvC,OAAO,CAACwC,MAAR,CAAe3B,UAAf,CADuB;AAEhC4B,EAAAA,KAAK,EAAE,IAAItC,KAAJ,CAAU,IAAID,YAAJ,EAAV;AAFyB,CAAhB,CAApB;AAKA,eAAeoC,WAAf","sourcesContent":["import {\n    Environment,\n    Network,\n    QueryResponseCache,\n    RecordSource,\n    Store,\n} from 'relay-runtime';\n\nconst oneMinute = 60 * 1000;\nconst cache = new QueryResponseCache({size: 250, ttl: oneMinute});\n\nfunction getApi() {\n    return window.location.origin.split(\":\")[0] + \":\" + window.location.origin.split(\":\")[1];\n    // return \"https://silverman.app\"\n}\n\nfunction fetchQuery(\n    operation,\n    variables,\n    cacheConfig,\n) {\n    const queryID = operation.text;\n    const isMutation = operation.operationKind === 'mutation';\n    const isQuery = operation.operationKind === 'query';\n    const forceFetch = cacheConfig && cacheConfig.force;\n\n    // Try to get data from cache on queries\n    const fromCache = cache.get(queryID, variables);\n    if (\n        isQuery &&\n        fromCache !== null &&\n        !forceFetch\n    ) {\n        return fromCache;\n    }\n\n    // Otherwise, fetch data from server\n    return fetch(getApi()+'/graphql', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            query: operation.text,\n            variables,\n        }),\n    }).then(response => {\n        return response.json();\n    }).then(json => {\n        // Update cache on queries\n        if (isQuery && json) {\n            cache.set(queryID, variables, json);\n        }\n        // Clear cache on mutations\n        if (isMutation) {\n            cache.clear();\n        }\n\n        return json;\n    });\n}\n\nconst environment = new Environment({\n    network: Network.create(fetchQuery),\n    store: new Store(new RecordSource()),\n});\n\nexport default environment;"]},"metadata":{},"sourceType":"module"}