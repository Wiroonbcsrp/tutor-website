{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n * @emails oncall+relay\n */\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar RelayConnectionInterface = require('../handlers/connection/RelayConnectionInterface');\n\nvar RelayError = require('../util/RelayError');\n\nvar RelayModernRecord = require('./RelayModernRecord');\n\nvar RelayObservable = require('../network/RelayObservable');\n\nvar RelayRecordSource = require('./RelayRecordSource');\n\nvar RelayResponseNormalizer = require('./RelayResponseNormalizer');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar stableCopy = require('../util/stableCopy');\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar _require = require('./ClientID'),\n    generateClientID = _require.generateClientID;\n\nvar _require2 = require('./RelayModernSelector'),\n    createNormalizationSelector = _require2.createNormalizationSelector;\n\nvar _require3 = require('./RelayStoreUtils'),\n    ROOT_TYPE = _require3.ROOT_TYPE,\n    TYPENAME_KEY = _require3.TYPENAME_KEY,\n    getStorageKey = _require3.getStorageKey;\n\nfunction execute(config) {\n  return new Executor(config);\n}\n/**\n * Coordinates the execution of a query, handling network callbacks\n * including optimistic payloads, standard payloads, resolution of match\n * dependencies, etc.\n */\n\n\nvar Executor =\n/*#__PURE__*/\nfunction () {\n  function Executor(_ref) {\n    var _this = this;\n\n    var operation = _ref.operation,\n        operationLoader = _ref.operationLoader,\n        optimisticConfig = _ref.optimisticConfig,\n        publishQueue = _ref.publishQueue,\n        scheduler = _ref.scheduler,\n        sink = _ref.sink,\n        source = _ref.source,\n        updater = _ref.updater,\n        operationTracker = _ref.operationTracker,\n        getDataID = _ref.getDataID;\n    this._incrementalResults = new Map();\n    this._nextSubscriptionId = 0;\n    this._operation = operation;\n    this._operationLoader = operationLoader;\n    this._optimisticUpdates = null;\n    this._publishQueue = publishQueue;\n    this._scheduler = scheduler;\n    this._sink = sink;\n    this._source = new Map();\n    this._state = 'started';\n    this._updater = updater;\n    this._subscriptions = new Map();\n    this._operationTracker = operationTracker;\n    this._getDataID = getDataID;\n    this._incrementalPayloadsPending = false;\n    this._pendingModulePayloadsCount = 0;\n    var id = this._nextSubscriptionId++;\n    source.subscribe({\n      complete: function complete() {\n        return _this._complete(id);\n      },\n      error: function error(_error2) {\n        return _this._error(_error2);\n      },\n      next: function next(response) {\n        try {\n          _this._next(id, response);\n        } catch (error) {\n          sink.error(error);\n        }\n      },\n      start: function start(subscription) {\n        return _this._start(id, subscription);\n      }\n    });\n\n    if (optimisticConfig != null) {\n      this._processOptimisticResponse(optimisticConfig.response != null ? {\n        data: optimisticConfig.response\n      } : null, optimisticConfig.updater);\n    }\n  } // Cancel any pending execution tasks and mark the executor as completed.\n\n\n  var _proto = Executor.prototype;\n\n  _proto.cancel = function cancel() {\n    var _this2 = this;\n\n    if (this._state === 'completed') {\n      return;\n    }\n\n    this._state = 'completed';\n\n    if (this._subscriptions.size !== 0) {\n      this._subscriptions.forEach(function (sub) {\n        return sub.unsubscribe();\n      });\n\n      this._subscriptions.clear();\n    }\n\n    var optimisticUpdates = this._optimisticUpdates;\n\n    if (optimisticUpdates !== null) {\n      this._optimisticUpdates = null;\n      optimisticUpdates.forEach(function (update) {\n        return _this2._publishQueue.revertUpdate(update);\n      });\n\n      this._publishQueue.run();\n    }\n\n    this._incrementalResults.clear();\n\n    this._completeOperationTracker();\n  };\n\n  _proto._schedule = function _schedule(task) {\n    var _this3 = this;\n\n    var scheduler = this._scheduler;\n\n    if (scheduler != null) {\n      var _id2 = this._nextSubscriptionId++;\n\n      RelayObservable.create(function (sink) {\n        var cancellationToken = scheduler.schedule(function () {\n          try {\n            task();\n            sink.complete();\n          } catch (error) {\n            sink.error(error);\n          }\n        });\n        return function () {\n          return scheduler.cancel(cancellationToken);\n        };\n      }).subscribe({\n        complete: function complete() {\n          return _this3._complete(_id2);\n        },\n        error: function error(_error3) {\n          return _this3._error(_error3);\n        },\n        start: function start(subscription) {\n          return _this3._start(_id2, subscription);\n        }\n      });\n    } else {\n      task();\n    }\n  };\n\n  _proto._complete = function _complete(id) {\n    this._subscriptions[\"delete\"](id);\n\n    if (this._subscriptions.size === 0) {\n      this.cancel();\n\n      this._sink.complete();\n    }\n  };\n\n  _proto._error = function _error(error) {\n    this.cancel();\n\n    this._sink.error(error);\n  };\n\n  _proto._start = function _start(id, subscription) {\n    this._subscriptions.set(id, subscription);\n  } // Handle a raw GraphQL response.\n  ;\n\n  _proto._next = function _next(_id, response) {\n    var _this4 = this;\n\n    this._schedule(function () {\n      _this4._handleNext(response);\n\n      _this4._maybeCompleteSubscriptionOperationTracking();\n    });\n  };\n\n  _proto._handleNext = function _handleNext(response) {\n    var _response$extensions, _response$extensions2;\n\n    if (this._state === 'completed') {\n      return;\n    }\n\n    if (response.data == null) {\n      var errors = response.errors;\n      var messages = errors ? errors.map(function (_ref2) {\n        var message = _ref2.message;\n        return message;\n      }).join('\\n') : '(No errors)';\n      var error = RelayError.create('RelayNetwork', 'No data returned for operation `' + this._operation.request.node.params.name + '`, got error(s):\\n' + messages + '\\n\\nSee the error `source` property for more information.');\n      error.source = {\n        errors: errors,\n        operation: this._operation.request.node,\n        variables: this._operation.request.variables\n      };\n      throw error;\n    } // Above check ensures that response.data != null\n\n\n    var responseWithData = response;\n    var isOptimistic = ((_response$extensions = response.extensions) === null || _response$extensions === void 0 ? void 0 : _response$extensions.isOptimistic) === true;\n\n    if (isOptimistic && this._state !== 'started') {\n      !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernQueryExecutor: optimistic payload received after server payload.') : invariant(false) : void 0;\n    }\n\n    var isFinal = ((_response$extensions2 = response.extensions) === null || _response$extensions2 === void 0 ? void 0 : _response$extensions2.is_final) === true;\n    this._state = isFinal ? 'loading_final' : 'loading_incremental';\n\n    if (isFinal) {\n      this._incrementalPayloadsPending = false;\n    }\n\n    if (isOptimistic) {\n      this._processOptimisticResponse(responseWithData, null);\n    } else {\n      var path = response.path,\n          label = response.label;\n\n      if (path != null || label != null) {\n        if (typeof label === 'string' && Array.isArray(path)) {\n          this._processIncrementalResponse({\n            path: path,\n            label: label,\n            response: responseWithData\n          });\n        } else {\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernQueryExecutor: invalid incremental payload, expected ' + '`path` and `label` to either both be null/undefined, or ' + '`path` to be an `Array<string | number>` and `label` to be a ' + '`string`.') : invariant(false) : void 0;\n        }\n      } else {\n        this._processResponse(responseWithData);\n      }\n    }\n\n    this._sink.next(response);\n  };\n\n  _proto._processOptimisticResponse = function _processOptimisticResponse(response, updater) {\n    var _this5 = this;\n\n    !(this._optimisticUpdates === null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'environment.execute: only support one optimistic response per ' + 'execute.') : invariant(false) : void 0;\n\n    if (response == null && updater == null) {\n      return;\n    }\n\n    var optimisticUpdates = [];\n\n    if (response) {\n      var payload = normalizeResponse(response, this._operation.root, ROOT_TYPE, {\n        getDataID: this._getDataID,\n        path: [],\n        request: this._operation.request\n      });\n      validateOptimisticResponsePayload(payload);\n      optimisticUpdates.push({\n        operation: this._operation,\n        payload: payload,\n        updater: updater\n      });\n\n      this._processOptimisticFollowups(payload, optimisticUpdates);\n    } else if (updater) {\n      optimisticUpdates.push({\n        operation: this._operation,\n        payload: {\n          connectionEvents: null,\n          errors: null,\n          fieldPayloads: null,\n          incrementalPlaceholders: null,\n          moduleImportPayloads: null,\n          source: RelayRecordSource.create()\n        },\n        updater: updater\n      });\n    }\n\n    this._optimisticUpdates = optimisticUpdates;\n    optimisticUpdates.forEach(function (update) {\n      return _this5._publishQueue.applyUpdate(update);\n    });\n\n    this._publishQueue.run();\n  };\n\n  _proto._processOptimisticFollowups = function _processOptimisticFollowups(payload, optimisticUpdates) {\n    if (payload.moduleImportPayloads && payload.moduleImportPayloads.length) {\n      var moduleImportPayloads = payload.moduleImportPayloads;\n      var operationLoader = this._operationLoader;\n      !operationLoader ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected an operationLoader to be ' + 'configured when using `@match`.') : invariant(false) : void 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = moduleImportPayloads[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var moduleImportPayload = _step.value;\n          var operation = operationLoader.get(moduleImportPayload.operationReference);\n\n          if (operation == null) {\n            this._processAsyncOptimisticModuleImport(operationLoader, moduleImportPayload);\n          } else {\n            var moduleImportOptimisitcUpdates = this._processOptimisticModuleImport(operation, moduleImportPayload);\n\n            optimisticUpdates.push.apply(optimisticUpdates, (0, _toConsumableArray2[\"default\"])(moduleImportOptimisitcUpdates));\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  };\n\n  _proto._normalizeModuleImport = function _normalizeModuleImport(moduleImportPayload, operation) {\n    var selector = createNormalizationSelector(operation, moduleImportPayload.dataID, moduleImportPayload.variables);\n    return normalizeResponse({\n      data: moduleImportPayload.data\n    }, selector, moduleImportPayload.typeName, {\n      getDataID: this._getDataID,\n      path: moduleImportPayload.path,\n      request: this._operation.request\n    });\n  };\n\n  _proto._processOptimisticModuleImport = function _processOptimisticModuleImport(operation, moduleImportPayload) {\n    var optimisticUpdates = [];\n\n    var modulePayload = this._normalizeModuleImport(moduleImportPayload, operation);\n\n    validateOptimisticResponsePayload(modulePayload);\n    optimisticUpdates.push({\n      operation: this._operation,\n      payload: modulePayload,\n      updater: null\n    });\n\n    this._processOptimisticFollowups(modulePayload, optimisticUpdates);\n\n    return optimisticUpdates;\n  };\n\n  _proto._processAsyncOptimisticModuleImport = function _processAsyncOptimisticModuleImport(operationLoader, moduleImportPayload) {\n    var _this6 = this;\n\n    operationLoader.load(moduleImportPayload.operationReference).then(function (operation) {\n      if (operation == null || _this6._state !== 'started') {\n        return;\n      }\n\n      var moduleImportOptimisitcUpdates = _this6._processOptimisticModuleImport(operation, moduleImportPayload);\n\n      moduleImportOptimisitcUpdates.forEach(function (update) {\n        return _this6._publishQueue.applyUpdate(update);\n      });\n\n      if (_this6._optimisticUpdates == null) {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayModernQueryExecutor: Unexpected ModuleImport optimisitc ' + 'update in operation %s.' + _this6._operation.request.node.params.name) : void 0;\n      } else {\n        var _this$_optimisticUpda;\n\n        (_this$_optimisticUpda = _this6._optimisticUpdates).push.apply(_this$_optimisticUpda, (0, _toConsumableArray2[\"default\"])(moduleImportOptimisitcUpdates));\n\n        _this6._publishQueue.run();\n      }\n    });\n  };\n\n  _proto._processResponse = function _processResponse(response) {\n    var _this7 = this;\n\n    if (this._optimisticUpdates !== null) {\n      this._optimisticUpdates.forEach(function (update) {\n        return _this7._publishQueue.revertUpdate(update);\n      });\n\n      this._optimisticUpdates = null;\n    }\n\n    var payload = normalizeResponse(response, this._operation.root, ROOT_TYPE, {\n      getDataID: this._getDataID,\n      path: [],\n      request: this._operation.request\n    });\n    this._incrementalPayloadsPending = false;\n\n    this._incrementalResults.clear();\n\n    this._source.clear();\n\n    this._publishQueue.commitPayload(this._operation, payload, this._updater);\n\n    var updatedOwners = this._publishQueue.run();\n\n    this._updateOperationTracker(updatedOwners);\n\n    this._processPayloadFollowups(payload);\n  }\n  /**\n   * Handles any follow-up actions for a Relay payload for @match, @defer,\n   * and @stream directives.\n   */\n  ;\n\n  _proto._processPayloadFollowups = function _processPayloadFollowups(payload) {\n    var _this8 = this;\n\n    if (this._state === 'completed') {\n      return;\n    }\n\n    var incrementalPlaceholders = payload.incrementalPlaceholders,\n        moduleImportPayloads = payload.moduleImportPayloads;\n\n    if (moduleImportPayloads && moduleImportPayloads.length !== 0) {\n      var operationLoader = this._operationLoader;\n      !operationLoader ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected an operationLoader to be ' + 'configured when using `@match`.') : invariant(false) : void 0;\n      moduleImportPayloads.forEach(function (moduleImportPayload) {\n        _this8._processModuleImportPayload(moduleImportPayload, operationLoader);\n      });\n    }\n\n    if (incrementalPlaceholders && incrementalPlaceholders.length !== 0) {\n      this._incrementalPayloadsPending = this._state !== 'loading_final';\n      incrementalPlaceholders.forEach(function (incrementalPlaceholder) {\n        _this8._processIncrementalPlaceholder(payload, incrementalPlaceholder);\n      });\n\n      if (this._state === 'loading_final') {\n        // The query has defer/stream selections that are enabled, but the\n        // server indicated that this is a \"final\" payload: no incremental\n        // payloads will be delivered. Warn that the query was (likely) executed\n        // on the server in non-streaming mode, with incremental delivery\n        // disabled.\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayModernEnvironment: Operation `%s` contains @defer/@stream ' + 'directives but was executed in non-streaming mode. See ' + 'https://fburl.com/relay-incremental-delivery-non-streaming-warning.', this._operation.request.node.params.name) : void 0; // But eagerly process any deferred payloads\n\n        incrementalPlaceholders.forEach(function (placeholder) {\n          if (placeholder.kind === 'defer') {\n            _this8._processDeferResponse(placeholder.label, placeholder.path, placeholder, {\n              data: placeholder.data\n            });\n          }\n        });\n      }\n    }\n  };\n\n  _proto._maybeCompleteSubscriptionOperationTracking = function _maybeCompleteSubscriptionOperationTracking() {\n    var isSubscriptionOperation = this._operation.request.node.params.operationKind === 'subscription';\n\n    if (!isSubscriptionOperation) {\n      return;\n    }\n\n    if (this._pendingModulePayloadsCount === 0 && this._incrementalPayloadsPending === false) {\n      this._completeOperationTracker();\n    }\n  }\n  /**\n   * Processes a ModuleImportPayload, asynchronously resolving the normalization\n   * AST and using it to normalize the field data into a RelayResponsePayload.\n   * The resulting payload may contain other incremental payloads (match,\n   * defer, stream, etc); these are handled by calling\n   * `_processPayloadFollowups()`.\n   */\n  ;\n\n  _proto._processModuleImportPayload = function _processModuleImportPayload(moduleImportPayload, operationLoader) {\n    var _this9 = this;\n\n    var syncOperation = operationLoader.get(moduleImportPayload.operationReference);\n\n    if (syncOperation != null) {\n      // If the operation module is available synchronously, normalize the\n      // data synchronously.\n      this._schedule(function () {\n        _this9._handleModuleImportPayload(moduleImportPayload, syncOperation);\n\n        _this9._maybeCompleteSubscriptionOperationTracking();\n      });\n    } else {\n      // Otherwise load the operation module and schedule a task to normalize\n      // the data when the module is available.\n      var _id3 = this._nextSubscriptionId++;\n\n      this._pendingModulePayloadsCount++;\n\n      var decrementPendingCount = function decrementPendingCount() {\n        _this9._pendingModulePayloadsCount--;\n\n        _this9._maybeCompleteSubscriptionOperationTracking();\n      }; // Observable.from(operationLoader.load()) wouldn't catch synchronous\n      // errors thrown by the load function, which is user-defined. Guard\n      // against that with Observable.from(new Promise(<work>)).\n\n\n      RelayObservable.from(new Promise(function (resolve, reject) {\n        operationLoader.load(moduleImportPayload.operationReference).then(resolve, reject);\n      })).map(function (operation) {\n        if (operation != null) {\n          _this9._schedule(function () {\n            _this9._handleModuleImportPayload(moduleImportPayload, operation);\n          });\n        }\n      }).subscribe({\n        complete: function complete() {\n          _this9._complete(_id3);\n\n          decrementPendingCount();\n        },\n        error: function error(_error4) {\n          _this9._error(_error4);\n\n          decrementPendingCount();\n        },\n        start: function start(subscription) {\n          return _this9._start(_id3, subscription);\n        }\n      });\n    }\n  };\n\n  _proto._handleModuleImportPayload = function _handleModuleImportPayload(moduleImportPayload, operation) {\n    var relayPayload = this._normalizeModuleImport(moduleImportPayload, operation);\n\n    this._publishQueue.commitPayload(this._operation, relayPayload);\n\n    var updatedOwners = this._publishQueue.run();\n\n    this._updateOperationTracker(updatedOwners);\n\n    this._processPayloadFollowups(relayPayload);\n  }\n  /**\n   * The executor now knows that GraphQL responses are expected for a given\n   * label/path:\n   * - Store the placeholder in order to process any future responses that may\n   *   arrive.\n   * - Then process any responses that had already arrived.\n   *\n   * The placeholder contains the normalization selector, path (for nested\n   * defer/stream), and other metadata used to normalize the incremental\n   * response(s).\n   */\n  ;\n\n  _proto._processIncrementalPlaceholder = function _processIncrementalPlaceholder(relayPayload, placeholder) {\n    var _this10 = this;\n\n    var _relayPayload$fieldPa; // Update the label => path => placeholder map\n\n\n    var label = placeholder.label,\n        path = placeholder.path;\n    var pathKey = path.map(String).join('.');\n\n    var resultForLabel = this._incrementalResults.get(label);\n\n    if (resultForLabel == null) {\n      resultForLabel = new Map();\n\n      this._incrementalResults.set(label, resultForLabel);\n    }\n\n    var resultForPath = resultForLabel.get(pathKey);\n    var pendingResponses = resultForPath != null && resultForPath.kind === 'response' ? resultForPath.responses : null;\n    resultForLabel.set(pathKey, {\n      kind: 'placeholder',\n      placeholder: placeholder\n    }); // Store references to the parent node to allow detecting concurrent\n    // modifications to the parent before items arrive and to replay\n    // handle field payloads to account for new information on source records.\n\n    var parentID;\n\n    if (placeholder.kind === 'stream' || placeholder.kind === 'connection_edge') {\n      parentID = placeholder.parentID;\n    } else if (placeholder.kind === 'defer' || placeholder.kind === 'connection_page_info') {\n      parentID = placeholder.selector.dataID;\n    } else {\n      placeholder;\n      !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Unsupported incremental placeholder kind `%s`.', placeholder.kind) : invariant(false) : void 0;\n    }\n\n    var parentRecord = relayPayload.source.get(parentID);\n    var parentPayloads = ((_relayPayload$fieldPa = relayPayload.fieldPayloads) !== null && _relayPayload$fieldPa !== void 0 ? _relayPayload$fieldPa : []).filter(function (fieldPayload) {\n      var fieldID = generateClientID(fieldPayload.dataID, fieldPayload.fieldKey);\n      return (// handlers applied to the streamed field itself\n        fieldPayload.dataID === parentID || // handlers applied to a field on an ancestor object, where\n        // ancestor.field links to the parent record (example: connections)\n        fieldID === parentID\n      );\n    }); // If an incremental payload exists for some id that record should also\n    // exist.\n\n    !(parentRecord != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected record `%s` to exist.', parentID) : invariant(false) : void 0;\n    var nextParentRecord;\n    var nextParentPayloads;\n\n    var previousParentEntry = this._source.get(parentID);\n\n    if (previousParentEntry != null) {\n      // If a previous entry exists, merge the previous/next records and\n      // payloads together.\n      nextParentRecord = RelayModernRecord.update(previousParentEntry.record, parentRecord);\n      var handlePayloads = new Map();\n\n      var dedupePayload = function dedupePayload(payload) {\n        var key = stableStringify(payload);\n        handlePayloads.set(key, payload);\n      };\n\n      previousParentEntry.fieldPayloads.forEach(dedupePayload);\n      parentPayloads.forEach(dedupePayload);\n      nextParentPayloads = Array.from(handlePayloads.values());\n    } else {\n      nextParentRecord = parentRecord;\n      nextParentPayloads = parentPayloads;\n    }\n\n    this._source.set(parentID, {\n      record: nextParentRecord,\n      fieldPayloads: nextParentPayloads\n    }); // If there were any queued responses, process them now that placeholders\n    // are in place\n\n\n    if (pendingResponses != null) {\n      pendingResponses.forEach(function (incrementalResponse) {\n        _this10._schedule(function () {\n          _this10._processIncrementalResponse(incrementalResponse);\n        });\n      });\n    }\n  }\n  /**\n   * Lookup the placeholder the describes how to process an incremental\n   * response, normalize/publish it, and process any nested defer/match/stream\n   * metadata.\n   */\n  ;\n\n  _proto._processIncrementalResponse = function _processIncrementalResponse(incrementalResponse) {\n    var label = incrementalResponse.label,\n        path = incrementalResponse.path,\n        response = incrementalResponse.response;\n\n    var resultForLabel = this._incrementalResults.get(label);\n\n    if (resultForLabel == null) {\n      resultForLabel = new Map();\n\n      this._incrementalResults.set(label, resultForLabel);\n    }\n\n    if (label.indexOf('$defer$') !== -1) {\n      var pathKey = path.map(String).join('.');\n      var resultForPath = resultForLabel.get(pathKey);\n\n      if (resultForPath == null) {\n        resultForPath = {\n          kind: 'response',\n          responses: [incrementalResponse]\n        };\n        resultForLabel.set(pathKey, resultForPath);\n        return;\n      } else if (resultForPath.kind === 'response') {\n        resultForPath.responses.push(incrementalResponse);\n        return;\n      }\n\n      var placeholder = resultForPath.placeholder;\n\n      if (placeholder.kind === 'connection_page_info') {\n        this._processConnectionPageInfoResponse(label, path, placeholder, response);\n      } else {\n        !(placeholder.kind === 'defer') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected data for path `%s` for label `%s` ' + 'to be data for @defer, was `@%s`.', pathKey, label, placeholder.kind) : invariant(false) : void 0;\n\n        this._processDeferResponse(label, path, placeholder, response);\n      }\n    } else {\n      // @stream payload path values end in the field name and item index,\n      // but Relay records paths relative to the parent of the stream node:\n      // therefore we strip the last two elements just to lookup the path\n      // (the item index is used later to insert the element in the list)\n      var _pathKey = path.slice(0, -2).map(String).join('.');\n\n      var _resultForPath = resultForLabel.get(_pathKey);\n\n      if (_resultForPath == null) {\n        _resultForPath = {\n          kind: 'response',\n          responses: [incrementalResponse]\n        };\n        resultForLabel.set(_pathKey, _resultForPath);\n        return;\n      } else if (_resultForPath.kind === 'response') {\n        _resultForPath.responses.push(incrementalResponse);\n\n        return;\n      }\n\n      var _placeholder = _resultForPath.placeholder;\n\n      if (_placeholder.kind === 'connection_edge') {\n        this._processConnectionEdgeResponse(label, path, _placeholder, response);\n      } else {\n        !(_placeholder.kind === 'stream') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected data for path `%s` for label `%s` ' + 'to be data for @stream, was `@%s`.', _pathKey, label, _placeholder.kind) : invariant(false) : void 0;\n\n        this._processStreamResponse(label, path, _placeholder, response);\n      }\n    }\n  };\n\n  _proto._processConnectionPageInfoResponse = function _processConnectionPageInfoResponse(label, path, placeholder, response) {\n    var _relayPayload$connect;\n\n    var relayPayload = normalizeResponse(response, placeholder.selector, placeholder.typeName, {\n      getDataID: this._getDataID,\n      path: placeholder.path,\n      request: this._operation.request\n    });\n\n    var _RelayConnectionInter = RelayConnectionInterface.get(),\n        END_CURSOR = _RelayConnectionInter.END_CURSOR,\n        HAS_NEXT_PAGE = _RelayConnectionInter.HAS_NEXT_PAGE,\n        HAS_PREV_PAGE = _RelayConnectionInter.HAS_PREV_PAGE,\n        PAGE_INFO = _RelayConnectionInter.PAGE_INFO,\n        START_CURSOR = _RelayConnectionInter.START_CURSOR;\n\n    var pageRecord = relayPayload.source.get(placeholder.selector.dataID);\n    var pageInfoID = pageRecord != null ? RelayModernRecord.getLinkedRecordID(pageRecord, PAGE_INFO) : null;\n    var pageInfoRecord = pageInfoID != null ? relayPayload.source.get(pageInfoID) : null;\n    var endCursor;\n    var hasNextPage;\n    var hasPrevPage;\n    var startCursor;\n\n    if (pageInfoRecord != null) {\n      endCursor = RelayModernRecord.getValue(pageInfoRecord, END_CURSOR);\n      hasNextPage = RelayModernRecord.getValue(pageInfoRecord, HAS_NEXT_PAGE);\n      hasPrevPage = RelayModernRecord.getValue(pageInfoRecord, HAS_PREV_PAGE);\n      startCursor = RelayModernRecord.getValue(pageInfoRecord, START_CURSOR);\n    }\n\n    relayPayload = (0, _objectSpread2[\"default\"])({}, relayPayload, {\n      connectionEvents: ((_relayPayload$connect = relayPayload.connectionEvents) !== null && _relayPayload$connect !== void 0 ? _relayPayload$connect : []).concat({\n        kind: 'stream.pageInfo',\n        args: placeholder.args,\n        connectionID: placeholder.connectionID,\n        pageInfo: {\n          endCursor: typeof endCursor === 'string' ? endCursor : null,\n          startCursor: typeof startCursor === 'string' ? startCursor : null,\n          hasNextPage: typeof hasNextPage === 'boolean' ? hasNextPage : null,\n          hasPrevPage: typeof hasPrevPage === 'boolean' ? hasPrevPage : null\n        },\n        request: this._operation.request\n      })\n    });\n\n    this._publishQueue.commitPayload(this._operation, relayPayload);\n\n    var updatedOwners = this._publishQueue.run();\n\n    this._updateOperationTracker(updatedOwners);\n\n    this._processPayloadFollowups(relayPayload);\n  };\n\n  _proto._processDeferResponse = function _processDeferResponse(label, path, placeholder, response) {\n    var parentID = placeholder.selector.dataID;\n    var relayPayload = normalizeResponse(response, placeholder.selector, placeholder.typeName, {\n      getDataID: this._getDataID,\n      path: placeholder.path,\n      request: this._operation.request\n    });\n\n    this._publishQueue.commitPayload(this._operation, relayPayload); // Load the version of the parent record from which this incremental data\n    // was derived\n\n\n    var parentEntry = this._source.get(parentID);\n\n    !(parentEntry != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected the parent record `%s` for @defer ' + 'data to exist.', parentID) : invariant(false) : void 0;\n    var fieldPayloads = parentEntry.fieldPayloads;\n\n    if (fieldPayloads.length !== 0) {\n      var handleFieldsRelayPayload = {\n        connectionEvents: null,\n        errors: null,\n        fieldPayloads: fieldPayloads,\n        incrementalPlaceholders: null,\n        moduleImportPayloads: null,\n        source: RelayRecordSource.create()\n      };\n\n      this._publishQueue.commitPayload(this._operation, handleFieldsRelayPayload);\n    }\n\n    var updatedOwners = this._publishQueue.run();\n\n    this._updateOperationTracker(updatedOwners);\n\n    this._processPayloadFollowups(relayPayload);\n  };\n\n  _proto._processConnectionEdgeResponse = function _processConnectionEdgeResponse(label, path, placeholder, response) {\n    var _relayPayload$connect2;\n\n    var parentID = placeholder.parentID,\n        node = placeholder.node,\n        variables = placeholder.variables;\n\n    var _this$_normalizeStrea = this._normalizeStreamItem(response, parentID, node, variables, path, placeholder.path),\n        relayPayload = _this$_normalizeStrea.relayPayload,\n        itemID = _this$_normalizeStrea.itemID,\n        itemIndex = _this$_normalizeStrea.itemIndex;\n\n    relayPayload = (0, _objectSpread2[\"default\"])({}, relayPayload, {\n      connectionEvents: ((_relayPayload$connect2 = relayPayload.connectionEvents) !== null && _relayPayload$connect2 !== void 0 ? _relayPayload$connect2 : []).concat({\n        kind: 'stream.edge',\n        args: placeholder.args,\n        connectionID: placeholder.connectionID,\n        edgeID: itemID,\n        index: itemIndex,\n        request: this._operation.request\n      })\n    });\n\n    this._publishQueue.commitPayload(this._operation, relayPayload);\n\n    var updatedOwners = this._publishQueue.run();\n\n    this._updateOperationTracker(updatedOwners);\n\n    this._processPayloadFollowups(relayPayload);\n  }\n  /**\n   * Process the data for one item in a @stream field.\n   */\n  ;\n\n  _proto._processStreamResponse = function _processStreamResponse(label, path, placeholder, response) {\n    var parentID = placeholder.parentID,\n        node = placeholder.node,\n        variables = placeholder.variables; // Find the LinkedField where @stream was applied\n\n    var field = node.selections[0];\n    !(field != null && field.kind === 'LinkedField' && field.plural === true) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected @stream to be used on a plural field.') : invariant(false) : void 0;\n\n    var _this$_normalizeStrea2 = this._normalizeStreamItem(response, parentID, field, variables, path, placeholder.path),\n        fieldPayloads = _this$_normalizeStrea2.fieldPayloads,\n        itemID = _this$_normalizeStrea2.itemID,\n        itemIndex = _this$_normalizeStrea2.itemIndex,\n        prevIDs = _this$_normalizeStrea2.prevIDs,\n        relayPayload = _this$_normalizeStrea2.relayPayload,\n        storageKey = _this$_normalizeStrea2.storageKey; // Publish the new item and update the parent record to set\n    // field[index] = item *if* the parent record hasn't been concurrently\n    // modified.\n\n\n    this._publishQueue.commitPayload(this._operation, relayPayload, function (store) {\n      var currentParentRecord = store.get(parentID);\n\n      if (currentParentRecord == null) {\n        // parent has since been deleted, stream data is stale\n        return;\n      }\n\n      var currentItems = currentParentRecord.getLinkedRecords(storageKey);\n\n      if (currentItems == null) {\n        // field has since been deleted, stream data is stale\n        return;\n      }\n\n      if (currentItems.length !== prevIDs.length || currentItems.some(function (currentItem, index) {\n        return prevIDs[index] !== (currentItem && currentItem.getDataID());\n      })) {\n        // field has been modified by something other than this query,\n        // stream data is stale\n        return;\n      } // parent.field has not been concurrently modified:\n      // update `parent.field[index] = item`\n\n\n      var nextItems = (0, _toConsumableArray2[\"default\"])(currentItems);\n      nextItems[itemIndex] = store.get(itemID);\n      currentParentRecord.setLinkedRecords(nextItems, storageKey);\n    }); // Now that the parent record has been updated to include the new item,\n    // also update any handle fields that are derived from the parent record.\n\n\n    if (fieldPayloads.length !== 0) {\n      var handleFieldsRelayPayload = {\n        connectionEvents: null,\n        errors: null,\n        fieldPayloads: fieldPayloads,\n        incrementalPlaceholders: null,\n        moduleImportPayloads: null,\n        source: RelayRecordSource.create()\n      };\n\n      this._publishQueue.commitPayload(this._operation, handleFieldsRelayPayload);\n    }\n\n    var updatedOwners = this._publishQueue.run();\n\n    this._updateOperationTracker(updatedOwners);\n\n    this._processPayloadFollowups(relayPayload);\n  };\n\n  _proto._normalizeStreamItem = function _normalizeStreamItem(response, parentID, field, variables, path, normalizationPath) {\n    var _field$alias, _field$concreteType, _this$_getDataID;\n\n    var data = response.data;\n    !(typeof data === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected the GraphQL @stream payload `data` ' + 'value to be an object.') : invariant(false) : void 0;\n    var responseKey = (_field$alias = field.alias) !== null && _field$alias !== void 0 ? _field$alias : field.name;\n    var storageKey = getStorageKey(field, variables); // Load the version of the parent record from which this incremental data\n    // was derived\n\n    var parentEntry = this._source.get(parentID);\n\n    !(parentEntry != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected the parent record `%s` for @stream ' + 'data to exist.', parentID) : invariant(false) : void 0;\n    var parentRecord = parentEntry.record,\n        fieldPayloads = parentEntry.fieldPayloads; // Load the field value (items) that were created by *this* query executor\n    // in order to check if there has been any concurrent modifications by some\n    // other operation.\n\n    var prevIDs = RelayModernRecord.getLinkedRecordIDs(parentRecord, storageKey);\n    !(prevIDs != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected record `%s` to have fetched field ' + '`%s` with @stream.', parentID, field.name) : invariant(false) : void 0; // Determine the index in the field of the new item\n\n    var finalPathEntry = path[path.length - 1];\n    var itemIndex = parseInt(finalPathEntry, 10);\n    !(itemIndex === finalPathEntry && itemIndex >= 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected path for @stream to end in a ' + 'positive integer index, got `%s`', finalPathEntry) : invariant(false) : void 0;\n    var typeName = (_field$concreteType = field.concreteType) !== null && _field$concreteType !== void 0 ? _field$concreteType : data[TYPENAME_KEY];\n    !(typeof typeName === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected @stream field `%s` to have a ' + '__typename.', field.name) : invariant(false) : void 0; // Determine the __id of the new item: this must equal the value that would\n    // be assigned had the item not been streamed\n\n    var itemID = // https://github.com/prettier/prettier/issues/6403\n    // prettier-ignore\n    ((_this$_getDataID = this._getDataID(data, typeName)) !== null && _this$_getDataID !== void 0 ? _this$_getDataID : prevIDs && prevIDs[itemIndex]) || // Reuse previously generated client IDs\n    generateClientID(parentID, storageKey, itemIndex);\n    !(typeof itemID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected id of elements of field `%s` to ' + 'be strings.', storageKey) : invariant(false) : void 0; // Build a selector to normalize the item data with\n\n    var selector = createNormalizationSelector(field, itemID, variables); // Update the cached version of the parent record to reflect the new item:\n    // this is used when subsequent stream payloads arrive to see if there\n    // have been concurrent modifications to the list\n\n    var nextParentRecord = RelayModernRecord.clone(parentRecord);\n    var nextIDs = (0, _toConsumableArray2[\"default\"])(prevIDs);\n    nextIDs[itemIndex] = itemID;\n    RelayModernRecord.setLinkedRecordIDs(nextParentRecord, storageKey, nextIDs);\n\n    this._source.set(parentID, {\n      record: nextParentRecord,\n      fieldPayloads: fieldPayloads\n    });\n\n    var relayPayload = normalizeResponse(response, selector, typeName, {\n      getDataID: this._getDataID,\n      path: [].concat((0, _toConsumableArray2[\"default\"])(normalizationPath), [responseKey, String(itemIndex)]),\n      request: this._operation.request\n    });\n    return {\n      fieldPayloads: fieldPayloads,\n      itemID: itemID,\n      itemIndex: itemIndex,\n      prevIDs: prevIDs,\n      relayPayload: relayPayload,\n      storageKey: storageKey\n    };\n  };\n\n  _proto._updateOperationTracker = function _updateOperationTracker(updatedOwners) {\n    if (this._operationTracker != null && updatedOwners != null && updatedOwners.length > 0) {\n      this._operationTracker.update(this._operation.request, new Set(updatedOwners));\n    }\n  };\n\n  _proto._completeOperationTracker = function _completeOperationTracker() {\n    if (this._operationTracker != null) {\n      this._operationTracker.complete(this._operation.request);\n    }\n  };\n\n  return Executor;\n}();\n\nfunction normalizeResponse(response, selector, typeName, options) {\n  var data = response.data,\n      errors = response.errors;\n  var source = RelayRecordSource.create();\n  var record = RelayModernRecord.create(selector.dataID, typeName);\n  source.set(selector.dataID, record);\n  var relayPayload = RelayResponseNormalizer.normalize(source, selector, data, options);\n  return (0, _objectSpread2[\"default\"])({}, relayPayload, {\n    errors: errors\n  });\n}\n\nfunction stableStringify(value) {\n  var _JSON$stringify;\n\n  return (_JSON$stringify = JSON.stringify(stableCopy(value))) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : ''; // null-check for flow\n}\n\nfunction validateOptimisticResponsePayload(payload) {\n  var incrementalPlaceholders = payload.incrementalPlaceholders;\n\n  if (incrementalPlaceholders != null && incrementalPlaceholders.length !== 0) {\n    !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernQueryExecutor: optimistic responses cannot be returned ' + 'for operations that use incremental data delivery (@defer, ' + '@stream, and @stream_connection).') : invariant(false) : void 0;\n  }\n}\n\nmodule.exports = {\n  execute: execute\n};","map":null,"metadata":{},"sourceType":"script"}