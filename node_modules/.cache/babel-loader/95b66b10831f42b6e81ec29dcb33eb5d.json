{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar RelayOperationTracker =\n/*#__PURE__*/\nfunction () {\n  function RelayOperationTracker() {\n    this._ownersToPendingOperations = new Map();\n    this._pendingOperationsToOwners = new Map();\n    this._ownersToPromise = new Map();\n  }\n  /**\n   * Update the map of current processing operations with the set of\n   * affected owners and notify subscribers\n   */\n\n\n  var _proto = RelayOperationTracker.prototype;\n\n  _proto.update = function update(pendingOperation, affectedOwners) {\n    if (affectedOwners.size === 0) {\n      return;\n    }\n\n    var newlyAffectedOwners = new Set();\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = affectedOwners[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var owner = _step.value;\n\n        var pendingOperationsAffectingOwner = this._ownersToPendingOperations.get(owner);\n\n        if (pendingOperationsAffectingOwner != null) {\n          // In this case the `owner` already affected by some operations\n          // We just need to detect, is it the same operation that we already\n          // have in the list, or it's a new operation\n          if (!pendingOperationsAffectingOwner.has(pendingOperation)) {\n            pendingOperationsAffectingOwner.add(pendingOperation);\n            newlyAffectedOwners.add(owner);\n          }\n        } else {\n          // This is a new `owner` that is affected by the operation\n          this._ownersToPendingOperations.set(owner, new Set([pendingOperation]));\n\n          newlyAffectedOwners.add(owner);\n        }\n      } // No new owners were affected by this operation, we may stop here\n\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n          _iterator[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    if (newlyAffectedOwners.size === 0) {\n      return;\n    } // But, if some owners were affected we need to add them to\n    // the `_pendingOperationsToOwners` set\n\n\n    var ownersAffectedByOperation = this._pendingOperationsToOwners.get(pendingOperation) || new Set();\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = newlyAffectedOwners[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var _owner = _step2.value;\n\n        this._resolveOwnerResolvers(_owner);\n\n        ownersAffectedByOperation.add(_owner);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n          _iterator2[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    this._pendingOperationsToOwners.set(pendingOperation, ownersAffectedByOperation);\n  }\n  /**\n   * Once pending operation is completed we need to remove it\n   * from all tracking maps\n   */\n  ;\n\n  _proto.complete = function complete(pendingOperation) {\n    var affectedOwners = this._pendingOperationsToOwners.get(pendingOperation);\n\n    if (affectedOwners == null) {\n      return;\n    } // These were the owners affected only by `pendingOperation`\n\n\n    var completedOwners = new Set(); // These were the owners affected by `pendingOperation`\n    // and some other operations\n\n    var updatedOwners = new Set();\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = affectedOwners[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var owner = _step3.value;\n\n        var pendingOperationsAffectingOwner = this._ownersToPendingOperations.get(owner);\n\n        if (!pendingOperationsAffectingOwner) {\n          continue;\n        }\n\n        pendingOperationsAffectingOwner[\"delete\"](pendingOperation);\n\n        if (pendingOperationsAffectingOwner.size > 0) {\n          updatedOwners.add(owner);\n        } else {\n          completedOwners.add(owner);\n        }\n      } // Complete subscriptions for all owners, affected by `pendingOperation`\n\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n          _iterator3[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n\n    var _iteratorNormalCompletion4 = true;\n    var _didIteratorError4 = false;\n    var _iteratorError4 = undefined;\n\n    try {\n      for (var _iterator4 = completedOwners[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n        var _owner2 = _step4.value;\n\n        this._resolveOwnerResolvers(_owner2);\n\n        this._ownersToPendingOperations[\"delete\"](_owner2);\n      } // Update all owner that were updated by `pendingOperation` but still\n      // are affected by other operations\n\n    } catch (err) {\n      _didIteratorError4 = true;\n      _iteratorError4 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion4 && _iterator4[\"return\"] != null) {\n          _iterator4[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError4) {\n          throw _iteratorError4;\n        }\n      }\n    }\n\n    var _iteratorNormalCompletion5 = true;\n    var _didIteratorError5 = false;\n    var _iteratorError5 = undefined;\n\n    try {\n      for (var _iterator5 = updatedOwners[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n        var _owner3 = _step5.value;\n\n        this._resolveOwnerResolvers(_owner3);\n      } // Finally, remove pending operation\n\n    } catch (err) {\n      _didIteratorError5 = true;\n      _iteratorError5 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion5 && _iterator5[\"return\"] != null) {\n          _iterator5[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError5) {\n          throw _iteratorError5;\n        }\n      }\n    }\n\n    this._pendingOperationsToOwners[\"delete\"](pendingOperation);\n  };\n\n  _proto._resolveOwnerResolvers = function _resolveOwnerResolvers(owner) {\n    var promiseEntry = this._ownersToPromise.get(owner);\n\n    if (promiseEntry != null) {\n      promiseEntry.resolve();\n    }\n\n    this._ownersToPromise[\"delete\"](owner);\n  };\n\n  _proto.getPromiseForPendingOperationsAffectingOwner = function getPromiseForPendingOperationsAffectingOwner(owner) {\n    if (!this._ownersToPendingOperations.has(owner)) {\n      return null;\n    }\n\n    var cachedPromiseEntry = this._ownersToPromise.get(owner);\n\n    if (cachedPromiseEntry != null) {\n      return cachedPromiseEntry.promise;\n    }\n\n    var resolve;\n    var promise = new Promise(function (r) {\n      resolve = r;\n    });\n    !(resolve != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayOperationTracker: Expected resolver to be defined. If you' + 'are seeing this, it is likely a bug in Relay.') : invariant(false) : void 0;\n\n    this._ownersToPromise.set(owner, {\n      promise: promise,\n      resolve: resolve\n    });\n\n    return promise;\n  };\n\n  return RelayOperationTracker;\n}();\n\nmodule.exports = RelayOperationTracker;","map":null,"metadata":{},"sourceType":"script"}