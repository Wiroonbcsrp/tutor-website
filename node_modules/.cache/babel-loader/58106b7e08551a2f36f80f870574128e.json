{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar ConnectionResolver = {\n  initialize: function initialize() {\n    return {\n      edges: [],\n      pageInfo: {\n        endCursor: null,\n        hasNextPage: null,\n        hasPrevPage: null,\n        startCursor: null\n      }\n    };\n  },\n  reduce: function reduce(state, event) {\n    var nextEdges = [];\n    var nextPageInfo = (0, _objectSpread2[\"default\"])({}, state.pageInfo);\n    var seenNodes = new Set();\n\n    function pushEdge(edge) {\n      if (edge != null && edge.node != null && !seenNodes.has(edge.node.__id)) {\n        seenNodes.add(edge.node.__id);\n        nextEdges.push(edge);\n        return edge;\n      }\n    }\n\n    if (event.kind === 'update') {\n      state.edges.forEach(function (edge) {\n        var nextEdge = event.edgeData.hasOwnProperty(edge.__id) ? event.edgeData[edge.__id] : edge;\n        pushEdge(nextEdge);\n      });\n    } else if (event.kind === 'fetch') {\n      var eventPageInfo = event.pageInfo;\n\n      if (event.args.after != null) {\n        var _ref, _ref2;\n\n        if (event.args.after !== state.pageInfo.endCursor) {\n          return state;\n        }\n\n        state.edges.forEach(function (edge) {\n          pushEdge(edge);\n        });\n        event.edges.forEach(function (nextEdge) {\n          pushEdge(nextEdge);\n        });\n        nextPageInfo.endCursor = (_ref = eventPageInfo === null || eventPageInfo === void 0 ? void 0 : eventPageInfo.endCursor) !== null && _ref !== void 0 ? _ref : nextPageInfo.endCursor;\n        nextPageInfo.hasNextPage = (_ref2 = eventPageInfo === null || eventPageInfo === void 0 ? void 0 : eventPageInfo.hasNextPage) !== null && _ref2 !== void 0 ? _ref2 : nextPageInfo.hasNextPage;\n      } else if (event.args.before != null) {\n        var _ref3, _ref4;\n\n        if (event.args.before !== state.pageInfo.startCursor) {\n          return state;\n        }\n\n        event.edges.forEach(function (nextEdge) {\n          pushEdge(nextEdge);\n        });\n        state.edges.forEach(function (edge) {\n          pushEdge(edge);\n        });\n        nextPageInfo.startCursor = (_ref3 = eventPageInfo === null || eventPageInfo === void 0 ? void 0 : eventPageInfo.startCursor) !== null && _ref3 !== void 0 ? _ref3 : nextPageInfo.startCursor;\n        nextPageInfo.hasPrevPage = (_ref4 = eventPageInfo === null || eventPageInfo === void 0 ? void 0 : eventPageInfo.hasPrevPage) !== null && _ref4 !== void 0 ? _ref4 : nextPageInfo.hasPrevPage;\n      } else if (event.args.before == null && event.args.after == null) {\n        event.edges.forEach(function (nextEdge) {\n          pushEdge(nextEdge);\n        });\n\n        if (eventPageInfo != null) {\n          nextPageInfo = eventPageInfo;\n        }\n      }\n    } else if (event.kind === 'insert') {\n      state.edges.forEach(function (edge) {\n        pushEdge(edge);\n      });\n      var nextEdge = pushEdge(event.edge);\n\n      if (nextEdge != null) {\n        var _nextEdge$cursor;\n\n        nextPageInfo.endCursor = (_nextEdge$cursor = nextEdge.cursor) !== null && _nextEdge$cursor !== void 0 ? _nextEdge$cursor : nextPageInfo.endCursor;\n      }\n    } else if (event.kind === 'stream.edge') {\n      if (event.args.after != null) {\n        if (event.index === 0 && state.pageInfo.endCursor != null && event.args.after !== state.pageInfo.endCursor) {\n          return state;\n        }\n\n        state.edges.forEach(function (edge) {\n          pushEdge(edge);\n        });\n\n        var _nextEdge = pushEdge(event.edge);\n\n        if (_nextEdge) {\n          var _nextEdge$cursor2;\n\n          nextPageInfo.endCursor = (_nextEdge$cursor2 = _nextEdge.cursor) !== null && _nextEdge$cursor2 !== void 0 ? _nextEdge$cursor2 : nextPageInfo.endCursor;\n        }\n      } else if (event.args.before != null) {\n        if (event.index === 0 && state.pageInfo.startCursor != null && event.args.before !== state.pageInfo.startCursor) {\n          return state;\n        }\n\n        var _nextEdge2 = pushEdge(event.edge);\n\n        if (_nextEdge2) {\n          var _nextEdge$cursor3;\n\n          nextPageInfo.startCursor = (_nextEdge$cursor3 = _nextEdge2.cursor) !== null && _nextEdge$cursor3 !== void 0 ? _nextEdge$cursor3 : nextPageInfo.startCursor;\n        }\n\n        state.edges.forEach(function (edge) {\n          pushEdge(edge);\n        });\n      } else if (event.args.after == null || event.args.before == null) {\n        state.edges.forEach(function (edge) {\n          pushEdge(edge);\n        });\n\n        var _nextEdge3 = pushEdge(event.edge);\n\n        if (_nextEdge3 != null) {\n          var _nextEdge$cursor4;\n\n          nextPageInfo.endCursor = (_nextEdge$cursor4 = _nextEdge3.cursor) !== null && _nextEdge$cursor4 !== void 0 ? _nextEdge$cursor4 : nextPageInfo.endCursor;\n        }\n      }\n    } else if (event.kind === 'stream.pageInfo') {\n      nextEdges.push.apply(nextEdges, (0, _toConsumableArray2[\"default\"])(state.edges));\n\n      if (event.args.after != null) {\n        var _event$pageInfo$endCu;\n\n        nextPageInfo.endCursor = (_event$pageInfo$endCu = event.pageInfo.endCursor) !== null && _event$pageInfo$endCu !== void 0 ? _event$pageInfo$endCu : nextPageInfo.endCursor;\n        nextPageInfo.hasNextPage = !!event.pageInfo.hasNextPage;\n      } else if (event.args.before != null) {\n        var _event$pageInfo$start;\n\n        nextPageInfo.startCursor = (_event$pageInfo$start = event.pageInfo.startCursor) !== null && _event$pageInfo$start !== void 0 ? _event$pageInfo$start : nextPageInfo.startCursor;\n        nextPageInfo.hasPrevPage = !!event.pageInfo.hasPrevPage;\n      } else {\n        // stream refetch\n        nextPageInfo = event.pageInfo;\n      }\n    } else {\n      event;\n      !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ConnectionResolver-test: Unexpected event kind `%s`.', event.kind) : invariant(false) : void 0;\n    }\n\n    return {\n      edges: nextEdges,\n      pageInfo: nextPageInfo\n    };\n  }\n};\nmodule.exports = ConnectionResolver;","map":null,"metadata":{},"sourceType":"script"}