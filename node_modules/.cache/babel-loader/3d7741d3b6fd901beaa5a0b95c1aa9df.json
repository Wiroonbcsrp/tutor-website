{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nvar RelayDeclarativeMutationConfig = require('../mutations/RelayDeclarativeMutationConfig');\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar _require = require('../query/RelayModernGraphQLTag'),\n    getRequest = _require.getRequest;\n\nvar _require2 = require('../store/RelayModernOperationDescriptor'),\n    createOperationDescriptor = _require2.createOperationDescriptor;\n\nfunction requestSubscription(environment, config) {\n  var subscription = getRequest(config.subscription);\n\n  if (subscription.params.operationKind !== 'subscription') {\n    throw new Error('requestSubscription: Must use Subscription operation');\n  }\n\n  var configs = config.configs,\n      onCompleted = config.onCompleted,\n      onError = config.onError,\n      onNext = config.onNext,\n      variables = config.variables;\n  var operation = createOperationDescriptor(subscription, variables);\n  process.env.NODE_ENV !== \"production\" ? warning(!(config.updater && configs), 'requestSubscription: Expected only one of `updater` and `configs` to be provided') : void 0;\n\n  var _ref = configs ? RelayDeclarativeMutationConfig.convert(configs, subscription, null\n  /* optimisticUpdater */\n  , config.updater) : config,\n      updater = _ref.updater;\n\n  var sub = environment.execute({\n    operation: operation,\n    updater: updater\n  }).map(function () {\n    var data = environment.lookup(operation.fragment).data; // $FlowFixMe\n\n    return data;\n  }).subscribe({\n    next: onNext,\n    error: onError,\n    complete: onCompleted\n  });\n  return {\n    dispose: sub.unsubscribe\n  };\n}\n\nmodule.exports = requestSubscription;","map":null,"metadata":{},"sourceType":"script"}