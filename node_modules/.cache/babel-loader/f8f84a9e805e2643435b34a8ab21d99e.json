{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @emails oncall+relay\n * @format\n */\n'use strict';\n\nvar DataChecker = require('./DataChecker');\n\nvar RelayDefaultHandlerProvider = require('../handlers/RelayDefaultHandlerProvider');\n\nvar RelayDefaultMissingFieldHandlers = require('../handlers/RelayDefaultMissingFieldHandlers');\n\nvar RelayModernQueryExecutor = require('./RelayModernQueryExecutor');\n\nvar RelayObservable = require('../network/RelayObservable');\n\nvar RelayOperationTracker = require('../store/RelayOperationTracker');\n\nvar RelayPublishQueue = require('./RelayPublishQueue');\n\nvar RelayRecordSource = require('./RelayRecordSource');\n\nvar defaultGetDataID = require('./defaultGetDataID');\n\nvar generateID = require('../util/generateID');\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar RelayModernEnvironment =\n/*#__PURE__*/\nfunction () {\n  function RelayModernEnvironment(config) {\n    var _this = this;\n\n    var _config$log, _config$UNSTABLE_DO_N, _config$scheduler, _config$missingFieldH, _config$operationTrac;\n\n    this.configName = config.configName;\n    var handlerProvider = config.handlerProvider ? config.handlerProvider : RelayDefaultHandlerProvider;\n    var operationLoader = config.operationLoader;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      if (operationLoader != null) {\n        !(typeof operationLoader === 'object' && typeof operationLoader.get === 'function' && typeof operationLoader.load === 'function') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernEnvironment: Expected `operationLoader` to be an object ' + 'with get() and load() functions, got `%s`.', operationLoader) : invariant(false) : void 0;\n      }\n    }\n\n    this.__log = (_config$log = config.log) !== null && _config$log !== void 0 ? _config$log : emptyFunction;\n    this._operationLoader = operationLoader;\n    this._network = config.network;\n    this._getDataID = (_config$UNSTABLE_DO_N = config.UNSTABLE_DO_NOT_USE_getDataID) !== null && _config$UNSTABLE_DO_N !== void 0 ? _config$UNSTABLE_DO_N : defaultGetDataID;\n    this._publishQueue = new RelayPublishQueue(config.store, handlerProvider, this._getDataID);\n    this._scheduler = (_config$scheduler = config.scheduler) !== null && _config$scheduler !== void 0 ? _config$scheduler : null;\n    this._store = config.store;\n\n    this.__setNet = function (newNet) {\n      return _this._network = newNet;\n    };\n\n    if (process.env.NODE_ENV !== \"production\") {\n      var _require = require('./StoreInspector'),\n          inspect = _require.inspect;\n\n      this.DEBUG_inspect = function (dataID) {\n        return inspect(_this, dataID);\n      };\n    } // Register this Relay Environment with Relay DevTools if it exists.\n    // Note: this must always be the last step in the constructor.\n\n\n    var _global = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : undefined;\n\n    var devToolsHook = _global && _global.__RELAY_DEVTOOLS_HOOK__;\n\n    if (devToolsHook) {\n      devToolsHook.registerEnvironment(this);\n    }\n\n    this._missingFieldHandlers = (_config$missingFieldH = config.missingFieldHandlers) !== null && _config$missingFieldH !== void 0 ? _config$missingFieldH : RelayDefaultMissingFieldHandlers;\n    this._operationTracker = (_config$operationTrac = config.operationTracker) !== null && _config$operationTrac !== void 0 ? _config$operationTrac : new RelayOperationTracker();\n  }\n\n  var _proto = RelayModernEnvironment.prototype;\n\n  _proto.getStore = function getStore() {\n    return this._store;\n  };\n\n  _proto.getNetwork = function getNetwork() {\n    return this._network;\n  };\n\n  _proto.getOperationTracker = function getOperationTracker() {\n    return this._operationTracker;\n  };\n\n  _proto.applyUpdate = function applyUpdate(optimisticUpdate) {\n    var _this2 = this;\n\n    var dispose = function dispose() {\n      _this2._publishQueue.revertUpdate(optimisticUpdate);\n\n      _this2._publishQueue.run();\n    };\n\n    this._publishQueue.applyUpdate(optimisticUpdate);\n\n    this._publishQueue.run();\n\n    return {\n      dispose: dispose\n    };\n  };\n\n  _proto.revertUpdate = function revertUpdate(update) {\n    this._publishQueue.revertUpdate(update);\n\n    this._publishQueue.run();\n  };\n\n  _proto.replaceUpdate = function replaceUpdate(update, newUpdate) {\n    this._publishQueue.revertUpdate(update);\n\n    this._publishQueue.applyUpdate(newUpdate);\n\n    this._publishQueue.run();\n  };\n\n  _proto.applyMutation = function applyMutation(optimisticConfig) {\n    var _this3 = this;\n\n    var subscription = RelayObservable.create(function (sink) {\n      var source = RelayObservable.create(function (_sink) {});\n      var executor = RelayModernQueryExecutor.execute({\n        operation: optimisticConfig.operation,\n        operationLoader: _this3._operationLoader,\n        optimisticConfig: optimisticConfig,\n        publishQueue: _this3._publishQueue,\n        scheduler: _this3._scheduler,\n        sink: sink,\n        source: source,\n        updater: null,\n        operationTracker: _this3._operationTracker,\n        getDataID: _this3._getDataID\n      });\n      return function () {\n        return executor.cancel();\n      };\n    }).subscribe({});\n    return {\n      dispose: function dispose() {\n        return subscription.unsubscribe();\n      }\n    };\n  };\n\n  _proto.check = function check(readSelector) {\n    if (this._missingFieldHandlers == null) {\n      return this._store.check(readSelector);\n    }\n\n    return this._checkSelectorAndHandleMissingFields(readSelector, this._missingFieldHandlers);\n  };\n\n  _proto.commitPayload = function commitPayload(operation, payload) {\n    var _this4 = this;\n\n    RelayObservable.create(function (sink) {\n      var executor = RelayModernQueryExecutor.execute({\n        operation: operation,\n        operationLoader: _this4._operationLoader,\n        optimisticConfig: null,\n        publishQueue: _this4._publishQueue,\n        scheduler: null,\n        // make sure the first payload is sync\n        sink: sink,\n        source: RelayObservable.from({\n          data: payload\n        }),\n        updater: null,\n        operationTracker: _this4._operationTracker,\n        getDataID: _this4._getDataID\n      });\n      return function () {\n        return executor.cancel();\n      };\n    }).subscribe({});\n  };\n\n  _proto.commitUpdate = function commitUpdate(updater) {\n    this._publishQueue.commitUpdate(updater);\n\n    this._publishQueue.run();\n  };\n\n  _proto.lookup = function lookup(readSelector) {\n    return this._store.lookup(readSelector);\n  };\n\n  _proto.subscribe = function subscribe(snapshot, callback) {\n    return this._store.subscribe(snapshot, callback);\n  };\n\n  _proto.retain = function retain(selector) {\n    return this._store.retain(selector);\n  };\n\n  _proto._checkSelectorAndHandleMissingFields = function _checkSelectorAndHandleMissingFields(selector, handlers) {\n    var _this5 = this;\n\n    var target = RelayRecordSource.create();\n    var result = DataChecker.check(this._store.getSource(), target, selector, handlers, this._operationLoader, this._getDataID, function (id) {\n      return _this5._store.getConnectionEvents_UNSTABLE(id);\n    });\n\n    if (target.size() > 0) {\n      this._publishQueue.commitSource(target);\n\n      this._publishQueue.run();\n    }\n\n    return result;\n  }\n  /**\n   * Returns an Observable of GraphQLResponse resulting from executing the\n   * provided Query or Subscription operation, each result of which is then\n   * normalized and committed to the publish queue.\n   *\n   * Note: Observables are lazy, so calling this method will do nothing until\n   * the result is subscribed to: environment.execute({...}).subscribe({...}).\n   */\n  ;\n\n  _proto.execute = function execute(_ref) {\n    var _this6 = this;\n\n    var operation = _ref.operation,\n        cacheConfig = _ref.cacheConfig,\n        updater = _ref.updater;\n\n    var _this$__createLogObse = this.__createLogObserver(operation.request.node.params, operation.request.variables),\n        logObserver = _this$__createLogObse[0],\n        logRequestInfo = _this$__createLogObse[1];\n\n    return RelayObservable.create(function (sink) {\n      var source = _this6._network.execute(operation.request.node.params, operation.request.variables, cacheConfig || {}, null, logRequestInfo);\n\n      var executor = RelayModernQueryExecutor.execute({\n        operation: operation,\n        operationLoader: _this6._operationLoader,\n        optimisticConfig: null,\n        publishQueue: _this6._publishQueue,\n        scheduler: _this6._scheduler,\n        sink: sink,\n        source: source,\n        updater: updater,\n        operationTracker: _this6._operationTracker,\n        getDataID: _this6._getDataID\n      });\n      return function () {\n        return executor.cancel();\n      };\n    })[\"do\"](logObserver);\n  }\n  /**\n   * Returns an Observable of GraphQLResponse resulting from executing the\n   * provided Mutation operation, the result of which is then normalized and\n   * committed to the publish queue along with an optional optimistic response\n   * or updater.\n   *\n   * Note: Observables are lazy, so calling this method will do nothing until\n   * the result is subscribed to:\n   * environment.executeMutation({...}).subscribe({...}).\n   */\n  ;\n\n  _proto.executeMutation = function executeMutation(_ref2) {\n    var _this7 = this;\n\n    var operation = _ref2.operation,\n        optimisticResponse = _ref2.optimisticResponse,\n        optimisticUpdater = _ref2.optimisticUpdater,\n        updater = _ref2.updater,\n        uploadables = _ref2.uploadables;\n\n    var _this$__createLogObse2 = this.__createLogObserver(operation.request.node.params, operation.request.variables),\n        logObserver = _this$__createLogObse2[0],\n        logRequestInfo = _this$__createLogObse2[1];\n\n    return RelayObservable.create(function (sink) {\n      var optimisticConfig;\n\n      if (optimisticResponse || optimisticUpdater) {\n        optimisticConfig = {\n          operation: operation,\n          response: optimisticResponse,\n          updater: optimisticUpdater\n        };\n      }\n\n      var source = _this7._network.execute(operation.request.node.params, operation.request.variables, {\n        force: true\n      }, uploadables, logRequestInfo);\n\n      var executor = RelayModernQueryExecutor.execute({\n        operation: operation,\n        operationLoader: _this7._operationLoader,\n        optimisticConfig: optimisticConfig,\n        publishQueue: _this7._publishQueue,\n        scheduler: _this7._scheduler,\n        sink: sink,\n        source: source,\n        updater: updater,\n        operationTracker: _this7._operationTracker,\n        getDataID: _this7._getDataID\n      });\n      return function () {\n        return executor.cancel();\n      };\n    })[\"do\"](logObserver);\n  }\n  /**\n   * Returns an Observable of GraphQLResponse resulting from executing the\n   * provided Query or Subscription operation responses, the result of which is\n   * then normalized and comitted to the publish queue.\n   *\n   * Note: Observables are lazy, so calling this method will do nothing until\n   * the result is subscribed to:\n   * environment.executeWithSource({...}).subscribe({...}).\n   */\n  ;\n\n  _proto.executeWithSource = function executeWithSource(_ref3) {\n    var _this8 = this;\n\n    var operation = _ref3.operation,\n        source = _ref3.source;\n    return RelayObservable.create(function (sink) {\n      var executor = RelayModernQueryExecutor.execute({\n        operation: operation,\n        operationLoader: _this8._operationLoader,\n        operationTracker: _this8._operationTracker,\n        optimisticConfig: null,\n        publishQueue: _this8._publishQueue,\n        scheduler: _this8._scheduler,\n        sink: sink,\n        source: source,\n        getDataID: _this8._getDataID\n      });\n      return function () {\n        return executor.cancel();\n      };\n    });\n  };\n\n  _proto.toJSON = function toJSON() {\n    var _this$configName;\n\n    return \"RelayModernEnvironment(\".concat((_this$configName = this.configName) !== null && _this$configName !== void 0 ? _this$configName : '', \")\");\n  };\n\n  _proto.__createLogObserver = function __createLogObserver(params, variables) {\n    var transactionID = generateID();\n    var log = this.__log;\n    var logObserver = {\n      start: function start(subscription) {\n        log({\n          name: 'execute.start',\n          transactionID: transactionID,\n          params: params,\n          variables: variables\n        });\n      },\n      next: function next(response) {\n        log({\n          name: 'execute.next',\n          transactionID: transactionID,\n          response: response\n        });\n      },\n      error: function error(_error) {\n        log({\n          name: 'execute.error',\n          transactionID: transactionID,\n          error: _error\n        });\n      },\n      complete: function complete() {\n        log({\n          name: 'execute.complete',\n          transactionID: transactionID\n        });\n      },\n      unsubscribe: function unsubscribe() {\n        log({\n          name: 'execute.unsubscribe',\n          transactionID: transactionID\n        });\n      }\n    };\n\n    var logRequestInfo = function logRequestInfo(info) {\n      log({\n        name: 'execute.info',\n        transactionID: transactionID,\n        info: info\n      });\n    };\n\n    return [logObserver, logRequestInfo];\n  };\n\n  return RelayModernEnvironment;\n}(); // Add a sigil for detection by `isRelayModernEnvironment()` to avoid a\n// realm-specific instanceof check, and to aid in module tree-shaking to\n// avoid requiring all of RelayRuntime just to detect its environment.\n\n\nRelayModernEnvironment.prototype['@@RelayModernEnvironment'] = true;\n\nfunction emptyFunction() {}\n\nmodule.exports = RelayModernEnvironment;","map":null,"metadata":{},"sourceType":"script"}